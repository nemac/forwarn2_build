#!/usr/bin/python
'''
-- Are there new products waiting to be created?
   (Get julian days from the "products not yet created" file that are <= current julian day)

   For each julian day:

    -> Get year for current day

    -- Products for julian day of current year yet to be created?

       (Check if files are already in product directories)

       (After last product for the year is created there will be a window of time
        before the new year when products to be created list will be reset but
        no new products should be created until the next year hits --
        this check accounts for this case)

       -> Run dodate YYYYDOY
       -> Move products over to product directories when finished
       -> Remove julian day from list of products to be created

-- Is the products to be created file empty?

  -> Assume new year, reset the file
'''

import os, os.path, sys, re, datetime, shutil
import logging
import argparse
from subprocess import Popen, PIPE, STDOUT, check_output
from tempfile import NamedTemporaryFile

from Config import *


def pad_with_zero(num):
  num = int(num)
  return str(num) if num > 9 else '0{0}'.format(num)


def setup_logging(dryrun, is_cli_run):
  now = datetime.datetime.now()
  month = pad_with_zero(now.month)
  day = pad_with_zero(now.day)
  hour = pad_with_zero(now.hour)
  minute = pad_with_zero(now.minute)
  second = pad_with_zero(now.second)

  dryrun_text = 'dryrun_' if dryrun else ''
  cli_run_text = 'cli_run_' if is_cli_run else ''
  log_filename = '{0}{1}{2}{3}{4}_{5}h{6}m{7}s.txt'.format(dryrun_text, cli_run_text, now.year, month, day, hour, minute, second)
  log_path = os.path.join(MAIN_PATH, 'logs', log_filename)
  logging.basicConfig(filename=log_path, level=logging.DEBUG)
  logger = logging.getLogger().addHandler(logging.StreamHandler(sys.stdout))
  return log_path


def log_subprocess_output(pipe):
  for line in iter(pipe.readline, b''):
    logging.info('dodate - ' + str(line))


def products_exist(d):
  date = datetime.datetime.strptime(d, '%Y%j')
  date = date + datetime.timedelta(days=7)
  datestring = date.strftime('%Y%m%d')
  
  for source in SOURCE_DIRS:
    for key in PRODUCT_DIRS:
      prod_dir = PRODUCT_DIRS[key]
      path = os.path.join(PRODUCTS_BASE_PATH, source, prod_dir)
      if not os.path.exists(path) or (source == 'ForWarn2_Sqrt' and key == 'pctprogress'):
        continue
      files = os.listdir(path)
      files = list(filter(lambda f: datestring in f, files))
      if not len(files):
        return False
  return True


def renamed(filename):
  m = re.search("(.*)(\d{4})\.(\d{3})(.*)", filename)
  if m:
    pieces = list(m.groups())
    year = '{0}'.format(pieces[1])
    doy = '{0}'.format(int(pieces[2]) + 7)
    try:
      date = datetime.datetime.strptime('{0}{1}'.format(year, doy), '%Y%j')
      datestring = date.strftime('%Y%m%d')
    except ValueError as e:
      logging.error("ValueError trying to make date for file {0}".format(filename, datestring))
    else:
      new_pieces = [ pieces[0], datestring, pieces[3] ]
      new_filename = ''.join(new_pieces)
      return new_filename
  else:
    logging.error("Failed to rename filename: {0}".format(filename))


def make_test_file(start_text, product_dir, datestring):
  year = datestring[:4]
  jd = datestring[-3:]
  test = open(os.path.join(MAIN_PATH, product_dir, "TEST_{0}.{1}.{2}".format(start_text, year, jd)), 'a')


def destroy_test_files():
  logging.info("Destroying test files...\n")
  for src_dir in SOURCE_DIRS:
    for key in PRODUCT_DIRS:
      if src_dir == 'ForWarn2_Sqrt' and key == 'pctprogress':
        continue
      prod_dir = PRODUCT_DIRS[key]
      files = [ p for p in os.listdir(os.path.join(MAIN_PATH, src_dir, prod_dir)) if 'TEST' in p ]
      for f in files:
        os.remove(os.path.join(MAIN_PATH, src_dir, prod_dir, f))


def harvest_products(datestring, dryrun):
  for key in PRODUCT_DIRS:
    
    fw2_check = 'ForWarnLAEA' if key != 'ALC' else 'ALCLAEA'
    fw2_sqrt_check = 'ForWarn2LAEA' if key != 'ALC' else 'ALC2LAEA'
    
    path = os.path.join(MAIN_PATH, key)
    
    year = datestring[:4]
    day = datestring[-3:]

    if dryrun:
      make_test_file(fw2_check, key, datestring)
      make_test_file(fw2_sqrt_check, key, datestring)
    
    files = os.listdir(path)
    files = list(filter(lambda f: day in f, files))
    
    for f in files:
      if fw2_check in f and year in f:
        source_dir = 'ForWarn2'
      elif fw2_sqrt_check in f and year in f:
        source_dir = 'ForWarn2_Sqrt'
      else:
        continue
      old_fullpath = os.path.join(path, f)
      new_fullpath = os.path.join(PRODUCTS_BASE_PATH, source_dir, PRODUCT_DIRS[key], renamed(f))
      if os.path.isdir(os.path.join(PRODUCTS_BASE_PATH, source_dir, PRODUCT_DIRS[key])):
        logging.info("Moving {0}\n to \n{1}\n".format(old_fullpath, new_fullpath, datestring))
        shutil.copyfile(old_fullpath, new_fullpath)
      os.remove(old_fullpath)


def mail_results(success, datestring, dryrun, log_path):
  day = datestring[-3:]
  mail_to_addrs = []
  with open(MAIL_TO_ADDRS_FILE) as f:
    for addr in f:
      mail_to_addrs.append(addr.strip())

  logging.info("Emailing results to: {0}".format(' '.join(mail_to_addrs)))

  dryrun_body_text = "" if not dryrun else "NOTE: THIS IS A TEST OF THE FORWARN 2 SYSTEM!\n\n"

  if success:
    subject_text = "FW2 Day {0} Product Generation".format(day).rstrip()
    body_text = "{0}Success! The log is attached to this email.".format(dryrun_body_text)
  else:
    subject_text = "FAILED: FW2 Day Product Generation {0}".format(day).rstrip()
    body_text = "{0}Looks like something went wrong. We'll try again and send another notification email.".format(dryrun_body_text)

  # Read the log file and encode as base64
  with open(log_path) as f:
    log_contents = f.read()

  log_encoded = log_contents.encode('base64')

  # Load the email template file
  with open(EMAIL_TEMPLATE_FILE) as f:
    template_contents = f.read()

  # Replace the placeholder text with subject, content, log filename, and encoded attachment text
  log_filename = os.path.split(log_path)[1]
  rendered_email = template_contents.replace('EMAIL_SUBJECT_REPLACE', subject_text)
  rendered_email = rendered_email.replace('EMAIL_BODY_REPLACE', body_text)
  rendered_email = rendered_email.replace('LOG_FILENAME_REPLACE', log_filename)
  rendered_email = rendered_email.replace('ATTACHMENT_CONTENT_REPLACE', log_encoded)

  # Make a temporary file with the contents of the email
  f = NamedTemporaryFile(delete=False)
  f.write(rendered_email)
  filename = f.name
  f.close()
  # Must use full path to sendmail for cron jobs. (Cron is not aware of normal environment variables like $PATH)
  mail_command = "/usr/sbin/sendmail -f nemacmailer@gmail.com {0} < {1}".format(' '.join(mail_to_addrs), filename)

  # Send the email to each recipient in mail_to_addrs
  exit_status = os.system(mail_command)
  os.remove(filename)

def reset_todo_dates_file():
    # If dates is empty, reset the todo_product_days file
    logging.info('Resetting todo_product_days file...\n')
    os.remove(TODO_DAYS_PATH)
    os.system('cp {0} {1}'.format(ALL_DAYS_PATH, TODO_DAYS_PATH))


def get_all_todo_days():
  days = []
  with open(TODO_DAYS_PATH) as f:
    for jd in f:
      days.append(jd.strip())
  return days


def get_todo_dates():
  days = get_all_todo_days()
  # TODO: test this!
  if not len(days):
    reset_todo_dates_file()
  today = datetime.datetime.today()
  today = today.strftime('%Y%j')
  today = datetime.datetime.strptime(today, '%Y%j')
  year = today.strftime('%Y')
  dates = map(lambda day: datetime.datetime.strptime('{0}{1}'.format(year, day), '%Y%j'), days)
  dates = filter(lambda d: d <= today - datetime.timedelta(days=8), dates)
  dates = map(lambda d: d.strftime('%Y%j'), dates)
  dates = list(dates)
  dates = filter(lambda d: not products_exist(d), dates)
  return dates


def build_products_for_date(datestring, dryrun, log_path):
  os.chdir(os.path.join(MAIN_PATH))
  c = [ DODATE_PATH, datestring ]
  if not dryrun:
    try:
      c = [DODATE_PATH, datestring]
      process = Popen(c, stdout=PIPE, stderr=STDOUT)
      with process.stdout:
        log_subprocess_output(process.stdout)
      exitcode = process.wait()
    except Exception as e:
      mail_results(False, datestring, dryrun, log_path)
      logging.error("Exception while running dodate script.\n")
      logging.error(e)


def write_new_todo_days_file(days_to_remove, dryrun):
  logging.info('Writing new todo_product_days file...\n')
  days = get_all_todo_days()
  days = [ d for d in days if d not in days_to_remove ]
  new_file_contents = ''
  for day in days:
    new_file_contents += '{0}\n'.format(day)
  if not dryrun:
    with open(TODO_DAYS_PATH, 'w') as f:
      f.write(new_file_contents)
  else:
    logging.info("Since this is a dryrun we're not going to write a new todo_product_days file. But just for fun, this is what the contents of the new file would be:\n{0}".format(new_file_contents))


def build_products(dates, dryrun, is_cli_run, log_path, no_email):
  if dryrun:
    logging.info("DRY RUN - NO PRODUCTS WILL BE CREATED\n")
  days_to_remove = []
  for datestring in dates:
    day = datestring[-3:]
    logging.info("Building ForWarn 2 products for year {0}, julian day {1}...\n".format(datestring[:4], day))
    build_products_for_date(datestring, dryrun, log_path)
    success = False
    # Only harvest products for cron runs
    if not is_cli_run:
      harvest_products(datestring, dryrun)
      if products_exist(datestring):
        success = True
        days_to_remove.append(day)
      else:
        success = False
        logging.error('Products for day {0} did not make it to the destination folder. We\'ll keep {1} in the todo_product_days file, but something probably went gone wrong in the creation scripts. Check the rest of the log for more details.\n'.format(datestring, day))
    else:
      # We're running a CLI run for a specific date.
      # Defaulting to true for now
      success = True
    if not no_email:
      mail_results(success, datestring, dryrun, log_path)
  if not is_cli_run:
    write_new_todo_days_file(days_to_remove, dryrun)    
  if dryrun:
    destroy_test_files()


def is_date_argument_ok(arg):
  # Must be 7 characters long
  if len(arg) != 7:
    logging.error("Date argument must be 7 characters long in the form YYYYDOY. Run this script with the -h flag for more details.\n")
    return False

  # Must be of the form YYYYDOY
  try:
    date = datetime.datetime.strptime(arg, '%Y%j')
  except ValueError:
    logging.error("Date argument is malformed. Must be of the form YYYYDOY where DOY is a zero-padded julian day. For example, 003 represents the third day of the year. Run this script with the -h flag for more details.\n")
    return False

  # Must be a valid product date
  with open(ALL_DAYS_PATH) as f:
    all_days = []
    for jd in f:
      all_days.append(jd.strip())
  if date.strftime('%j') not in all_days:
    logging.error("The julian day you entered is not valid. Please provide a day that aligns with the GIMMS 8-day dropoff schedule (see all_product_days text file for reference). Run this script with the -h flag for more details.\n")
    return False

  # Must be a valid year (2001 onward)
  today = datetime.datetime.today()
  today_year = int(today.strftime('%Y'))
  date_year = int(date.strftime('%Y'))
  if date_year < 2001:
    logging.error("Year entered is invalid. We can only make products from 2001 onward.\n")
    return False
  if date_year > today_year:
    logging.error("Year entered is invalid. We can't make products for a year that hasn't happened yet!\n")
    return False

  # All checks passed, assume the datestring is ok
  return True


def setup_arg_parser():
  parser = argparse.ArgumentParser()
  parser.add_argument('--dryrun', action='store_true', help='Run this script without actually building any products. Useful for testing.')
  parser.add_argument('-d', '--date', help='Build products for a certain date. This argument must be of the form YYYYDOY, where the first four numbers represent a year and the last three numbers are a julian day, padded with zeroes if necessary. For example, to make a 2017 product for the second julian day of the year, this argument would be 2017002.')
  parser.add_argument('--no_email', action='store_true', help='Do not send email notifications. Useful for testing.')
  return parser



def check_is_only_instance_or_quit():
  name_of_this_script = sys.argv[0].split('/').pop()
  command = "ps -aux | grep %s" % name_of_this_script
  stdout = check_output(command, shell=True)
  lines = stdout.split('\n')
  # Remove empty strings made from the split command
  # Remove entries related to the grep command run as part of the process
  lines = [ line for line in lines if line != '' and 'grep' not in line ]
  if (len(lines) > 1):
    # One entry refers to this instance of the script.
    # More than one entry means there is another instance of the script running.
    logging.info("Another instance of %s is already running. Exiting..." % name_of_this_script)
    sys.exit() 

def main():
  os.chdir(MAIN_PATH)
  parser = setup_arg_parser()
  args = parser.parse_args()
  dryrun = args.dryrun
  is_cli_run = bool(args.date)
  no_email = args.no_email
  log_path = setup_logging(dryrun, is_cli_run)
  check_is_only_instance_or_quit()

  if is_cli_run:
    if not is_date_argument_ok(args.date):
      sys.exit(1)
    dates = [ args.date ]
  else:
    dates = get_todo_dates()

  if not len(dates):
    logging.info('No dates to process. Exiting...\n')
    os.remove(log_path)
    sys.exit(0)

  build_products(dates, dryrun, is_cli_run, log_path, no_email)

if __name__ == '__main__':
  main()

